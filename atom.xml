<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.ticktock.vip</id>
    <title>TickTock&apos;Blog</title>
    <updated>2022-04-13T08:26:00.037Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.ticktock.vip"/>
    <link rel="self" href="https://blog.ticktock.vip/atom.xml"/>
    <subtitle>我的博客</subtitle>
    <logo>https://blog.ticktock.vip/images/avatar.png</logo>
    <icon>https://blog.ticktock.vip/favicon.ico</icon>
    <rights>All rights reserved 2022, TickTock&apos;Blog</rights>
    <entry>
        <title type="html"><![CDATA[基于AHK和SQLite实现的快速查找]]></title>
        <id>https://blog.ticktock.vip/post/pniE3wyyj/</id>
        <link href="https://blog.ticktock.vip/post/pniE3wyyj/">
        </link>
        <updated>2022-04-13T08:01:39.000Z</updated>
        <summary type="html"><![CDATA[<p>工作中常常有这样的需求:在SDTM转换过程中，需要查找某个指标得到对应的code，类似于字典结构的key-value之间的关系。而相应的参考文档为excel文件，其中包含7000多条数据，经常需要复制指标然后去excel里进行筛选查找，无论是考虑搜索效率或是自动化实现都略有不足，因此使用AHK和SQLite进行高效快速查找。</p>
]]></summary>
        <content type="html"><![CDATA[<p>工作中常常有这样的需求:在SDTM转换过程中，需要查找某个指标得到对应的code，类似于字典结构的key-value之间的关系。而相应的参考文档为excel文件，其中包含7000多条数据，经常需要复制指标然后去excel里进行筛选查找，无论是考虑搜索效率或是自动化实现都略有不足，因此使用AHK和SQLite进行高效快速查找。</p>
<!-- more -->
<h2 id="思路">思路</h2>
<ol>
<li>
<p>将excel导出为SQLite数据库</p>
</li>
<li>
<p>采用DB Browser for SQLite程序进行查找</p>
</li>
<li>
<p>AHK实现自动化功能</p>
</li>
</ol>
<p>还有一些其他的思路:</p>
<ul>
<li>
<p>查找步骤由程序完成后返回结果，AHK直接复制最准确的结果到剪切板<br>
缺点:返回结果只有一个，且不一定是想要的那个结果</p>
</li>
<li>
<p>使用类似于代码补全的工具，输入对应的文字返回相应的多条记录<br>
放弃原因:没找到该类工具，自己实现有难度且浪费时间(输入法的词库功能勉勉强强，只能做好一个大而全的库以后才能有比较好的对应关系)</p>
</li>
</ul>
<h2 id="1-excel导出sqlite数据库">1. Excel导出SQLite数据库</h2>
<p>这里我使用Python的pandas、sqlalchemy库，来读取Excel并输出SQLite数据库</p>
<figure data-type="image" tabindex="1"><img src="https://blog.ticktock.vip/post-images/1649837065622.png" alt="Excel文件" loading="lazy"></figure>
<p>相应的Python代码</p>
<pre><code class="language-python">
import os
import pandas as pd
from sqlalchemy import create_engine

# 设定工作目录
os.chdir(os.path.dirname(__file__))
# 读取1.xls中的Sheet表单
df = pd.read_excel('1.xls',sheet_name='Sheet')
# 生成sdtm.db数据库，表名为terminology
engine = create_engine('sqlite:///sdtm.db')
df.to_sql('terminology',engine,index=False)

</code></pre>
<h2 id="2-利用db-browser-for-sqlite查找相应的字段">2. 利用DB Browser for SQLite查找相应的字段</h2>
<p>DB Browser for SQLite是一款免费开源工具(以下简称<code>SQLite工具</code>)，支持中文，打开后可以在图示位置进行搜索</p>
<figure data-type="image" tabindex="2"><img src="https://blog.ticktock.vip/post-images/1649837115012.png" alt="DB Browser for SQLite" loading="lazy"></figure>
<h2 id="3-ahk实现自动化功能">3. AHK实现自动化功能</h2>
<p>我打算实现选择某段文字，按下快捷键后跳转到<code>SQLite工具</code>得到搜索结果。<br>
于是我采取以下步骤实现：</p>
<ol>
<li>复制选择文字(相当于按下<code>Ctrl+C</code>)</li>
<li>利用CMD命令打开<code>sdtm.db</code>(需要设置db文件的默认程序为<code>SQLite工具</code>)</li>
<li>自动化点击浏览数据，并在搜索框输入复制得到的文字</li>
</ol>
<p>以下是相关代码:</p>
<p><code>app.ahk</code></p>
<pre><code class="language-autohotkey">
;---------------搜索受控术语--------------------
;调整窗口大小函数,避免相对坐标发生变化
ResizeWin(Width = 0,Height = 0)
{
WinGetPos,X,Y,W,H,A
if %Width% = 0
Width := W

if %Height% = 0
Height := H

WinMove,A ,,%X%,%Y%,%Width%,%Height%
}

;搜索函数，包含点击步骤
Search()
{
CoordMode, Mouse, Client
Click, 123,64
Click, 536,95
Send, ^a
Send, ^v
Click, 273,495
Click, 320,170
}

#s:: ;按下win+S执行搜索
clipboard:=
Send, ^{c}
ClipWait
;判断软件是否已经打开
if WinExist(&quot;ahk_exe DB Browser for SQLite.exe&quot;)
{
    WinActivate
    ResizeWin(1000,610)
    Search()
}
if !WinExist(&quot;ahk_exe DB Browser for SQLite.exe&quot;)
{
    Run, cmd /c start D:\work\tools\query\sdtm.db
    ;循环判断软件是否处于前台激活状态
    while True{
        if WinActive(&quot;ahk_exe DB Browser for SQLite.exe&quot;){
            ResizeWin(1000,610)
            Search()
            Break
        }
    }
}
return

;---------------搜索受控术语--------------------

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[aiohttp异步爬虫案例]]></title>
        <id>https://blog.ticktock.vip/post/c8xf3OPgV/</id>
        <link href="https://blog.ticktock.vip/post/c8xf3OPgV/">
        </link>
        <updated>2022-04-12T01:29:05.000Z</updated>
        <summary type="html"><![CDATA[<p>写在开头:由于需要爬取网上的一些数据，并且需要请求很多个URL，但requests库是一个同步库，因此采用aiohttp实现异步爬取数据</p>
]]></summary>
        <content type="html"><![CDATA[<p>写在开头:由于需要爬取网上的一些数据，并且需要请求很多个URL，但requests库是一个同步库，因此采用aiohttp实现异步爬取数据</p>
<!-- more -->
<h2 id="需求">需求</h2>
<p>爬取数据并得到想要的结果，并将结果输出为excel文档</p>
<h2 id="基本情况">基本情况</h2>
<p>通过浏览器开发者模式查看可以了解到网站是通过API得到json数据包从而渲染到网页，因此不需要使用lxml等解析网页的Python包，只需要通过网页请求得到对应的json数据包即可。</p>
<p>首先我得到了一个汇总的json(<code>SOC.json</code>)，这个json记录了每个子节点所对应的ID。</p>
<figure data-type="image" tabindex="1"><img src="https://blog.ticktock.vip/post-images/1649727019424.png" alt="SOC.json" loading="lazy"></figure>
<p>而获取子节点的json所需要的URL正好需要子节点ID作为参数拼接，子节点json如图所示。</p>
<figure data-type="image" tabindex="2"><img src="https://blog.ticktock.vip/post-images/1649727073503.png" alt="090a0a10-c969-11e9-98de-acde48001122.json" loading="lazy"></figure>
<p>子节点json记录了我所需要的所有信息，因此获取所有的子节点json即可。</p>
<h2 id="编程思路">编程思路</h2>
<ol>
<li>
<p>直接请求URL以获得<code>SOC.json</code>文件</p>
</li>
<li>
<p>读取<code>SOC.json</code>文件获取所有的子节点ID</p>
</li>
<li>
<p>由得到子节点ID拼接为URL，请求得到的URL获取子节点json</p>
</li>
<li>
<p>读取所有json文件并输出到EXCEL文件</p>
</li>
</ol>
<h2 id="相关代码">相关代码</h2>
<p>获取json的代码如下，相关网址已省略。</p>
<p><code>spider.py</code></p>
<pre><code class="language-python">
import json,requests,aiohttp,asyncio,os,random


SOC_URL = &quot;https://SOC_URL&quot;
TERM_URL = &quot;https://TERM_URL/&quot;

class Spider(object):
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.60 Safari/537.36 Edg/100.0.1185.29'
    }
    loop = asyncio.get_event_loop()
    
    # 设定异步延迟(s),防止请求过快获取不到数据
    delay = {
        'min': 2,
        'max': 6
    }
    
    
    def __init__(self) -&gt; None:
        pass
    
    async def async_requests(self,url):
        &quot;&quot;&quot;
        异步请求函数
        &quot;&quot;&quot;
        async with aiohttp.ClientSession(headers=self.headers) as session:
            async with session.get(url=url, headers=self.headers) as response:
                if response.status == 200:
                    print(response)
                    asyncio.sleep(random.uniform(self.delay['min'],self.delay['max'])*1000)
                    term_json = await response.json()
                    
                    term_id = term_json['data']['id']
                    print(term_id)
                    # 保存json文件
                    with open('assets/{}.json'.format(term_id),'w+') as f:
                            f.write(json.dumps(term_json))
    
    def getTerm(self):
        with open('assets/soc.json','r') as f:
            self.SOC_json = json.load(f)
        n = 0
        task = None
        for SOC in self.SOC_json[&quot;data&quot;]:
            for Term in SOC['children']:
                url = TERM_URL + Term['id']
                n=n+1
                print('第{}个正在进行...'.format(n))
                if &quot;{}.json&quot;.format(Term['id']) not in os.listdir('assets'):
                    task = asyncio.gather(self.async_requests(url))
        if task:
            self.loop.run_until_complete(task)
        self.loop.close()
    
    def getSOC(self):
        response:requests.Response = requests.get(SOC_URL,headers=self.headers)
        if response.status_code==200:
            SOC_json = response.json()
            with open('assets/soc.json','w+') as f:
                f.write(json.dumps(SOC_json))
            print(SOC_json)
            
    def run(self):
        self.getSOC()
        self.getTerm()
        
            
if __name__ == '__main__':
    spider = Spider()
    spider.run()
</code></pre>
<p>输出excel文件的相关代码</p>
<p><code>toexcel.py</code></p>
<pre><code class="language-python">
import os,json
import pandas as pd


os.listdir('assets')
df = pd.DataFrame(columns=['MedDRA Code','SOC','TERM','Grade 1','Grade 2','Grade 3','Grade 4','Grade 5','Definition'])

with open('assets/soc.json','r') as f:
    soc_json = json.load(f)
for soc_node in soc_json[&quot;data&quot;]:
    for term_node in soc_node['children']:
        term_id = term_node['id']
        with open('assets/{}.json'.format(term_id),'r') as f:
            term_json = json.load(f)
            code = term_json['data']['meddraCode']
            soc = soc_node['meddraName']
            term = term_json['data']['meddraName']
            grade1 = term_json['data']['grade1']
            grade2 = term_json['data']['grade2']
            grade3 = term_json['data']['grade3']
            grade4 = term_json['data']['grade4']
            grade5 = term_json['data']['grade5']
            definition = term_json['data']['definition']
            onedata = {
                'MedDRA Code':code,
                'SOC':soc,
                'TERM':term,
                'Grade 1':grade1,
                'Grade 2':grade2,
                'Grade 3':grade3,
                'Grade 4':grade4,
                'Grade 5':grade5,
                'Definition':definition
            }
            df = df.append(onedata,ignore_index=True)
df.to_excel('CTCAE5.0.xlsx',index=False)

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[yay安装失败的解决方案]]></title>
        <id>https://blog.ticktock.vip/post/8DXfwMpGg/</id>
        <link href="https://blog.ticktock.vip/post/8DXfwMpGg/">
        </link>
        <updated>2022-03-24T06:36:06.000Z</updated>
        <summary type="html"><![CDATA[<p>由于众所周知的原因，国内网络无法正常安装yay，故写下此篇文章。<br>
希望这篇文章为安装yay提供参考，避免踩坑。</p>
]]></summary>
        <content type="html"><![CDATA[<p>由于众所周知的原因，国内网络无法正常安装yay，故写下此篇文章。<br>
希望这篇文章为安装yay提供参考，避免踩坑。</p>
<!-- more -->
<h2 id="常规安装方法">常规安装方法</h2>
<pre><code class="language-shell">git clone https://aur.archlinux.org/yay
cd yay
makepkg -si
</code></pre>
<p>通常情况执行完上面所示命令即可安装成功，但是经常会遇到网络错误的情况，主要原因有如下两点</p>
<ul>
<li>go语言的软件安装源被屏蔽</li>
<li>github访问受限<br>
所以解决思路要么采取科学上网软件，或者采取我以下所说的方法。</li>
</ul>
<h2 id="解决方案">解决方案</h2>
<ol>
<li>
<p>go语言换源<br>
本文采用Goproxy.cn源，官网有换源方法，这里也贴出来</p>
<ol>
<li>换源</li>
</ol>
<pre><code class="language-shell">go env -w GO111MODULE=on
go env -w GOPROXY=https://goproxy.cn,direct
</code></pre>
<ol start="2">
<li>
<p>使更换的源生效</p>
<ul>
<li>临时生效</li>
</ul>
<pre><code class="language-shell">export GO111MODULE=on
export GOPROXY=https://goproxy.cn
</code></pre>
<ul>
<li>永久生效</li>
</ul>
<pre><code class="language-shell">echo &quot;export GO111MODULE=on&quot; &gt;&gt; ~/.profile
echo &quot;export GOPROXY=https://goproxy.cn&quot; &gt;&gt; ~/.profile
source ~/.profile
</code></pre>
</li>
</ol>
</li>
</ol>
<p>完成以上步骤以后，可以再次尝试</p>
<pre><code class="language-shell">makepkg -si
</code></pre>
<p>若还存在网络问题可以继续往下看，修改hosts</p>
<ol>
<li>修改hosts访问github<br>
本文采用的gitee找到的github hosts<br>
github hosts如下:</li>
</ol>
<pre><code># GitHub Host Start
185.199.108.154              github.githubassets.com
140.82.112.22                central.github.com
185.199.108.133              desktop.githubusercontent.com
185.199.108.153              assets-cdn.github.com
185.199.108.133              camo.githubusercontent.com
185.199.108.133              github.map.fastly.net
199.232.69.194               github.global.ssl.fastly.net
140.82.114.3                 gist.github.com
185.199.108.153              github.io
140.82.113.3                 github.com
140.82.112.5                 api.github.com
185.199.108.133              raw.githubusercontent.com
185.199.108.133              user-images.githubusercontent.com
185.199.108.133              favicons.githubusercontent.com
185.199.108.133              avatars5.githubusercontent.com
185.199.108.133              avatars4.githubusercontent.com
185.199.108.133              avatars3.githubusercontent.com
185.199.108.133              avatars2.githubusercontent.com
185.199.108.133              avatars1.githubusercontent.com
185.199.108.133              avatars0.githubusercontent.com
185.199.108.133              avatars.githubusercontent.com
140.82.112.10                codeload.github.com
52.217.207.1                 github-cloud.s3.amazonaws.com
52.216.78.4                  github-com.s3.amazonaws.com
52.217.194.169               github-production-release-asset-2e65be.s3.amazonaws.com
52.216.131.131               github-production-user-asset-6210df.s3.amazonaws.com
52.216.28.204                github-production-repository-file-5c1aeb.s3.amazonaws.com
185.199.108.153              githubstatus.com
64.71.144.202                github.community
185.199.108.133              media.githubusercontent.com
​
# Please Star : https://github.com/ineo6/hosts
# Mirror Repo : https://gitee.com/ineo6/hosts
# Update at: 2021-12-01 08:39:41
​
# GitHub Host End
</code></pre>
<p>修改hosts</p>
<pre><code class="language-shell">sudo vim /etc/hosts
</code></pre>
<p>将以上github host内容追加到/etc/hosts文件中<br>
使更新的hosts立即生效</p>
<pre><code class="language-shell">sudo systemctl restart nscd
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SAS总结]]></title>
        <id>https://blog.ticktock.vip/post/DgT6_5f8r/</id>
        <link href="https://blog.ticktock.vip/post/DgT6_5f8r/">
        </link>
        <updated>2022-03-24T00:55:36.000Z</updated>
        <summary type="html"><![CDATA[<p>记录使用SAS过程中遇到的各种问题</p>
]]></summary>
        <content type="html"><![CDATA[<p>记录使用SAS过程中遇到的各种问题</p>
<!-- more -->
<h2 id="总结">总结</h2>
<ol>
<li>put可用于输出变量值，方便调试程序。如:put a=;或put (a) (=)。put a[<em>]=;或put (a[</em>]) (=)可打印数组值</li>
<li>%put用于宏变量，输出宏变量的值，如:</li>
</ol>
<pre><code>%let a=&quot;a&quot;;
%put &amp;a.;
output:&quot;a&quot;
%put &amp;=a.;
output:A=&quot;a&quot;
</code></pre>
<ol>
<li>
<p>SAS系统设置 options</p>
<ul>
<li>mprint    打印生成的宏语句</li>
<li>symbolgen 解析生成的宏变量</li>
<li>mfile     指定后mprint可打印相应log</li>
</ul>
</li>
<li>
<p>SAS使用first或last的时候，要注意data步里的筛选语句，否则可能导致错误</p>
</li>
<li>
<p>SAS中<strong>informat</strong>和<strong>format</strong>分别控制<strong>输入时的格式</strong>和<strong>数据展示的值</strong></p>
<ul>
<li>例如:proc format; invalue $sex '男'=1 '女'=2;那么采用input转换，或者input输入原始值的时候，'男'或'女'会被替换成1或2。</li>
<li><strong>特别注意</strong>：若数据集变量已经为'男'或'女'，即使在数据集指定了informat，也不会改变其原始值，因为数据已经存在，而不是输入进去的，不会触发informat格式。</li>
<li>format则相当于一种key-value映射，不过得区分put(xxx,format)和直接指定format，前者会直接赋值转换后的真实值，后者才是真实的format，即key-value映射。</li>
</ul>
</li>
<li>
<p>SAS使用正则表达式元字符&quot;<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \s at position 23: …匹配不上的情况，需要在前面加上\̲s̲*，即&quot;\s*'>&quot;时，可能遇到匹配不上的情况，需要在前面加上\s*，即&quot;\s*</span>&quot;，才能匹配到结果。</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[AutoHotKey总结]]></title>
        <id>https://blog.ticktock.vip/post/IxYmoBLq0/</id>
        <link href="https://blog.ticktock.vip/post/IxYmoBLq0/">
        </link>
        <updated>2022-03-24T00:51:56.000Z</updated>
        <summary type="html"><![CDATA[<p>记录使用AutoHotKey所遇到的各种问题</p>
]]></summary>
        <content type="html"><![CDATA[<p>记录使用AutoHotKey所遇到的各种问题</p>
<!-- more -->
<h2 id="总结">总结</h2>
<ol>
<li>
<p>AHK在Send文本时，无法直接发送!=字符，需要注意</p>
</li>
<li>
<p>Clipboard为空时，ClipWait才会生效，且ClipWait第2个参数为1时，才会等待除文本或文件之外的其他类型数据</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[我的博客开通咯~🎉]]></title>
        <id>https://blog.ticktock.vip/post/6e9GaChMX/</id>
        <link href="https://blog.ticktock.vip/post/6e9GaChMX/">
        </link>
        <updated>2022-03-24T00:39:23.000Z</updated>
        <summary type="html"><![CDATA[<p>👏欢迎来到我的博客，在这里我会分享和记录自己的生活⛱、知识📖、创意💡...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏欢迎来到我的博客，在这里我会分享和记录自己的生活⛱、知识📖、创意💡...</p>
<!-- more -->
<h2 id="建站方式">建站方式</h2>
<p>建站采用Github Page+Gridea</p>
<h2 id="优点">优点</h2>
<ol>
<li>
<p>只需要专注于内容，而不需要关注其他的细节部分</p>
</li>
<li>
<p>可选择已有的主题或自行编写</p>
</li>
</ol>
]]></content>
    </entry>
</feed>